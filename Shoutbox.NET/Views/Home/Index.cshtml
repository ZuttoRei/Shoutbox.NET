@{
    ViewBag.Title = "Shoutbox";
    ViewBag.Icon = "fa fa-bullhorn";
}

@model Shoutbox.NET.ViewModels.IndexViewModel

@Scripts.Render("~/bundles/signalr")
@Scripts.Render("~/signalr/hubs")
<link href="~/Content/Chat.css" rel="stylesheet" />
<link href="~/Content/Shoutbox.css" rel="stylesheet" />
<link href="~/Content/Sststatus.css" rel="stylesheet" />
<link href="~/Content/sweetalert2.min.css" rel="stylesheet" />
<link href="~/Content/tagcloud.css" rel="stylesheet" />
<link href="~/Content/Team.css" rel="stylesheet" />
<link href="~/Content/Masterincidents.css" rel="stylesheet" />
<link href="~/Content/SOS.css" rel="stylesheet" />
<link href="~/Content/tooltipster.bundle.min.css" rel="stylesheet" />
<link href="~/Content/tooltipster-sideTip-light.min.css" rel="stylesheet" />

<!-- Unsorted plugins -->
<script src="~/Scripts/jquery.timeago.js"></script>
<script src="~/Scripts/jquery.timeago.nl.js"></script>
<script src="~/Scripts/jquery.tagcloud.js"></script>
<!-- Required for sweetalert2 to work -->
<script src="~/Scripts/core.min.js"></script>
<script src="~/Scripts/sweetalert2.min.js"></script>
<script src="~/Scripts/tooltipster.bundle.min.js"></script>

<!-- Scripts for each individual tile type -->
<script src="~/Scripts/chattile.js"></script>
<script src="~/Scripts/tagcloud.js"></script>
<script src="~/Scripts/team.js"></script>
<script src="~/Scripts/sststatus.js"></script>
<script src="~/Scripts/masterincidents.js"></script>
<script src="~/Scripts/Preload.js"></script>
<script src="~/Scripts/SOS.js"></script>

<!-- Begin tile grid -->
<div class="grid-stack">
    <!-- Begin Team tile -->
    <div class="grid-stack-item Team-tile" data-gs-no-resize="true" data-gs-x="0" data-gs-y="0"
         data-gs-width="3" data-gs-height="2">
        <div class="tile-titlebar">Team van de dag</div>
        <div class="grid-stack-item-content rabo-drop-shadow" id="Team-window">
            <table class="table">
                <thead>
                    <tr>
                        <th>Functie</th>
                        <th>Naam</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Vraagbaak</td>
                        <td id="Vraagbaak"></td>
                        <td><i class="fa fa-pencil edit-function-icon" aria-hidden="true" onclick="editTeam('Vraagbaak')"></i></td>
                    </tr>
                    <tr>
                        <td>WFM</td>
                        <td id="WFM"></td>
                        <td><i class="fa fa-pencil edit-function-icon" aria-hidden="true" onclick="editTeam('WFM')"></i></td>
                    </tr>
                    <tr>
                        <td>Teamlead</td>
                        <td id="Teamlead"></td>
                        <td><i class="fa fa-pencil edit-function-icon" aria-hidden="true" onclick="editTeam('Teamlead')"></i></td>
                    </tr>
                    <tr>
                        <td>MCS</td>
                        <td id="MCS"></td>
                        <td><i class="fa fa-pencil edit-function-icon" aria-hidden="true" onclick="editTeam('MCS')"></i></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <!-- End Team tile -->
    <!-- Begin Master Incident tile -->
    <div class="grid-stack-item" data-gs-x="0" data-gs-y="6"
         data-gs-width="3" data-gs-height="4">
        <div class="tile-titlebar">Master Incidenten</div>
            <div class="grid-stack-item-content rabo-drop-shadow master-incident-window">
                <div class="incident-container">
                    <!-- Begin incidents -->
                    <!-- End incidents -->
                </div>
                <div id="add-incident-button-container">
                    <button type="button" class="btn btn-default" id="add-incident-button" onclick="createMasterIncident()">
                        Toevoegen
                    </button>
                </div>
        </div>
    </div>
    <!-- End Master Incident tile -->

    <!-- Begin SOS monitor tile -->
    <div class="grid-stack-item" data-gs-no-resize="true" data-gs-x="0" data-gs-y="7"
         data-gs-width="3" data-gs-height="2">
        <div class="tile-titlebar">SOS Meldingen</div>
        <div class="grid-stack-item-content rabo-drop-shadow SOS-Container">
            <table class="table invisible" id="sos-table">
                <thead>
                    <tr>
                        <th>Applicatie</th>
                        <th>Laatste update</th>
                    </tr>
                </thead>
                <tbody id="SOS-table-body">
                    <!--Begin SOS applications-->
                    <!--End SOS applications-->
                </tbody>
            </table>

            <div id="sos-filler">
                    <i class="fa fa-exclamation-circle" aria-hidden="true"></i>
                    <p>Geen SOS meldingen bekend</p>
            </div>

        </div>
    </div>
    <!-- End SOS monitor tile -->

    <!-- Begin Announcement Tile-->
    <div class="grid-stack-item"
         data-gs-x="3" data-gs-y="0"
         data-gs-width="4" data-gs-height="8" data-gs-min-width="3" data-gs-min-height="4">

        <div class="tile-titlebar">Meldingen</div>
        <div class="grid-stack-item-content rabo-drop-shadow">
            <!-- Announcement Container -->
            <div id="announcement-window">
                <div class="chat-filler">
                    <i class="fa fa-bullhorn" aria-hidden="true"></i> <br />
                    <p>Er zijn nog geen omroepen geplaatst...</p>
                </div>
                <div class="message-container">
                    <input class="message-counter" type="hidden" value="0" />
                    <!-- Begin messages -->
                    <!-- End messages -->
                </div>

                <div class="textbox-wrapper">
                    <div class="input-group input-group-sm text-input">
                        <span class="input-group-addon tag-display"></span>                                                  <!--This textbox sends Announcement messages -->
                        <input type="text" class="form-control" placeholder="Omroep..." aria-describedby="sizing-addon3" onkeyup="$(this).ProcessInput(event, 'Announcement')">
                    </div>
                </div>

            </div>
        </div>
    </div>
    <!-- End Announcement Tile-->
    <!-- Begin Chat Tile-->
    <div class="grid-stack-item"
         data-gs-x="7" data-gs-y="0"
         data-gs-width="5" data-gs-height="6" data-gs-min-width="3" data-gs-min-height="4">
        <div class="tile-titlebar">Chat</div>
        <div class="grid-stack-item-content rabo-drop-shadow">
            <!-- Chat Container -->
            <div id="chat-window">
                <div class="chat-filler">
                    <i class="fa fa-comment-o" aria-hidden="true"></i> <br />
                    <p>Er zijn nog geen berichten geplaatst...</p>
                </div>
                <div class="message-container">
                    <input class="message-counter" type="hidden" value="0" />
                    <!-- Begin messages -->
                    <!-- End messages -->
                </div>
                <div class="textbox-wrapper">
                    <div class="input-group input-group-sm text-input">
                        <span class="input-group-addon tag-display"></span>                                                     <!--This textbox sends Chat messages -->
                        <input type="text" class="form-control" placeholder="Bericht..." aria-describedby="sizing-addon3" onkeyup="$(this).ProcessInput(event, 'Chat')">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Begin Trending topics tile -->
    <div class="grid-stack-item" data-gs-no-resize="true" data-gs-x="7" data-gs-y="6"
         data-gs-width="2" data-gs-height="2">
        <div class="tile-titlebar">Trending topics</div>
        <div class="grid-stack-item-content rabo-drop-shadow tag-cloud-tile" id="tagcloud">
            <!-- Begin tags-->
            @if (Model.Tags.Count == 0)
            {
                <div class="tagcloud-filler">
                    <p>Er is nog niks getagd</p>
                </div>
            }
            else
            {
                foreach (KeyValuePair<string, int> tag in Model.Tags)
                {
                    string uppercaseFirst = char.ToUpper(tag.Key[0]) + tag.Key.Substring(1).ToLower();
                    <a href="~/Tag/@uppercaseFirst" rel="@tag.Value" title="@tag.Value tags">#@tag.Key</a>
                }
            }
            <!-- End tags-->
        </div>
    </div>
    <!-- End TagCloud tile -->

    <!-- Begin service monitor tile -->
    <!-- Discontinued ;_; -->
    @*<div class="grid-stack-item" data-gs-no-resize="true" data-gs-x="5" data-gs-y="6"
         data-gs-width="3" data-gs-height="1">
        <div class="tile-titlebar">Service monitor</div>
        <div class="grid-stack-item-content rabo-drop-shadow sst-status-tile">
            <table class="table">
                <thead>
                    <tr>
                        <th>Service</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>SM9</td>
                        <td id="SM9"></td>
                    </tr>
                    <tr>
                        <td>EasyVista</td>
                        <td id="EasyVista"></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>*@
    <!-- End SST status tile -->

    <!-- Begin top 10 KM tile -->
    <div class="grid-stack-item" data-gs-no-resize="true" data-gs-x="9" data-gs-y="6"
         data-gs-width="3" data-gs-height="2">
        <div class="tile-titlebar">TODO</div>
        <div class="grid-stack-item-content rabo-drop-shadow SOS-Container">
            <ul>
                <li>SOS <i>- Work in progress</i></li>
                <li>TOP 10 KM</li>
                <li><strike>Security vulnerabilities</strike></li>
                <li>Notification configuration</li>
                <li>User permissions <i>- Work in progress</i></li>
                <li>History</li>
                <li>Required format Melding info bubble and.... </li>
                <li>Secret.. :3</li>
            </ul>
        </div>
    </div>
    <!-- End top 10 KM tile -->

</div>
<div class="preloader"></div>


<script>


    //If the browser supports notifications. TODO: Add ability to turn notifications on/off per message type
    if (("Notification" in window)) {
        Notification.requestPermission();
    }

    function spawnNotification(theTitle, theBody) {
        if (!("Notification" in window)) return;
        if (!document.hidden) return; //Only display notifications if the window isn't focused
        var options = {
            body: htmlDecode(theBody), //Allow special characters in notifications as this does not execute scripts
            icon: "Content/Images/Shoutbox-bullhorn.png",
            requireInteraction: false
        }
        var n = new Notification(theTitle, options);

        n.onclick = function () {
            parent.focus();
            window.focus(); //just in case, older browsers
            this.close(); //Closes the notification
        }
    }


    var sendMessage;
    var sendEditTeam;
    var sendCreateMasterIncident;

// Reference the auto-generated proxy for the hub.
    var shout = $.connection.shoutHub;
// Start the connection.
    $.connection.hub.start().done(function () {

//Check if the connecting user exists in our database, if not register
shout.server.registerIfNotRegistered();

    sendMessage = function (tag, text, type) {
        shout.server.broadcastChatMessage(tag, text, type)
    }

//Tell the server to change a Team
    sendEditTeam = function (functie, naam) {
        return shout.server.setTeam(functie, naam);
    }

//Tell the server to create a Master incident
    sendCreateMasterIncident = function (description, km, im) {
        return shout.server.createMasterIncident(description, km, im);
    }
});

// EVENT: Fired when receiving a command to update the Team tile
    shout.client.updateTeam = function (functie, naam, changer) {
        updateTeam(functie, naam, changer);
        spawnNotification("Shoutbox", changer + ": " + functie + " van de dag is " + naam);
    }

// EVENT: Fired when receiving a command to add a new masterIncident
    shout.client.addMasterIncident = function (description, km, im, time) {
        addMasterIncident(description, km, im, time);
        spawnNotification("Shoutbox", "Nieuw master incident: " + description);
    }

// EVENT: Fired when receiving a command to update the SOS overview
    shout.client.updateSOS = function (SOSList) {
        updateSOS(JSON.parse(SOSList));
        console.log(JSON.parse(SOSList));
    }


// EVENT: Fired when receiving a chat message from the server
    shout.client.receiveChatMessage = function (name, division, time, tag, text, type) {
        //Add message to the appropriate tile depending on the message type
        if (type == "Chat") {
            $("#chat-window").AddMessage(name, division, time, tag, text, true);
            spawnNotification("Shoutbox", name + ": " + tag + " " + text);
        } else if (type == "Announcement") {
            $("#announcement-window").AddMessage(name, division, time, tag, text, true);
            spawnNotification("Shoutbox", name + ": #" + tag + " " + text);
        }
        updateTagCloud(tag); //Update tags real time
    };

    function htmlEncode(value) {
        var encodedValue = $('<div />').textContent(value);
        return encodedValue;
    }

    function htmlDecode(encodedString) {
        var textArea = document.createElement('textarea');
        textArea.innerHTML = encodedString;
        return textArea.value;
    }

   //Load all messages, teams, tags and incidents
    addMessages(@Html.Raw(Model.SerializedMessages), true);
    updateTeams(@Html.Raw(Model.SerializedTeams));
    addMasterIncidents(@Html.Raw(Model.SerializedMasterIncidents));
    updateSOS(@Html.Raw(Model.SerializedSOS));

    //Set up the tag cloud
    initializeTagCloud();
</script>